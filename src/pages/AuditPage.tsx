import { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import Logo from '../components/Logo';
import jsPDF from 'jspdf';
import logo from '../assets/stetsenko-logo.png';
import { SparklesIcon, DocumentTextIcon, ShieldCheckIcon } from '@heroicons/react/24/outline';

const AuditPage = () => {
  const [code, setCode] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState<any>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsAnalyzing(true);
    
    // TODO: Implement actual AI analysis
    // This is a placeholder for demonstration
    setTimeout(() => {
      setResults({
        vulnerabilities: [
          {
            severity: 'High',
            title: 'Reentrancy Vulnerability',
            description: 'Potential reentrancy attack vector detected in the withdraw function.',
            recommendation: 'Implement checks-effects-interactions pattern and use ReentrancyGuard.'
          },
          {
            severity: 'Medium',
            title: 'Unchecked External Calls',
            description: 'External calls without proper error handling.',
            recommendation: 'Implement try-catch blocks and proper error handling for external calls.'
          }
        ],
        metadata: {
          contractName: 'SampleContract',
          linesOfCode: 150,
          owner: '0x1234...5678',
          centralizationRisk: 'Medium',
          proxyUse: false,
          upgradeability: 'Not upgradeable'
        }
      });
      setIsAnalyzing(false);
    }, 2000);
  };

  const handleFileDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file && file.name.endsWith('.sol')) {
      const reader = new FileReader();
      reader.onload = (event) => {
        setCode(event.target?.result as string);
      };
      reader.readAsText(file);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file && file.name.endsWith('.sol')) {
      const reader = new FileReader();
      reader.onload = (event) => {
        setCode(event.target?.result as string);
      };
      reader.readAsText(file);
    }
  };

  const generateReportId = () => {
    return 'AUD-' + Math.random().toString(36).substr(2, 9).toUpperCase();
  };

  const handleDownloadPDF = () => {
    if (!results) return;
    const doc = new jsPDF();
    const reportId = generateReportId();
    const img = new Image();
    img.src = logo;
    img.onload = () => {
      doc.addImage(img, 'PNG', 150, 10, 40, 30);
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(18);
      doc.text('Smart Contract Audit Report', 15, 20);
      doc.setFontSize(11);
      doc.setFont('helvetica', 'normal');
      doc.text(`Report ID: ${reportId}`, 15, 30);
      doc.text(`Service: Stetsenko Audit`, 15, 37);
      doc.text(`Date: ${new Date().toLocaleDateString()}`, 15, 44);
      doc.text('---', 15, 50);
      doc.setFont('helvetica', 'bold');
      doc.text('Contract Metadata:', 15, 58);
      doc.setFont('helvetica', 'normal');
      let y = 65;
      Object.entries(results.metadata).forEach(([key, value]) => {
        doc.text(`${key}: ${value}`, 15, y);
        y += 7;
      });
      y += 5;
      doc.setFont('helvetica', 'bold');
      doc.text('Vulnerabilities:', 15, y);
      y += 7;
      doc.setFont('helvetica', 'normal');
      results.vulnerabilities.forEach((vuln: any, idx: number) => {
        doc.text(`${idx + 1}. [${vuln.severity}] ${vuln.title}`, 15, y);
        y += 6;
        doc.text(`Description: ${vuln.description}`, 18, y);
        y += 6;
        doc.text(`Recommendation: ${vuln.recommendation}`, 18, y);
        y += 8;
      });
      y += 2;
      doc.setFont('helvetica', 'bold');
      doc.text('Service Info:', 15, y);
      y += 7;
      doc.setFont('helvetica', 'normal');
      doc.text('This report was generated by Stetsenko Audit (beta version).', 15, y);
      y += 6;
      doc.text('Developed by Volodymyr Stetsenko. For questions: carstetsen@gmail.com', 15, y);
      y += 8;
      doc.setFontSize(10);
      doc.text('Disclaimer: This is an automated AI-powered audit. Always consult with a professional auditor before deploying smart contracts.', 15, y, { maxWidth: 180 });
      doc.save(`audit-report-${reportId}.pdf`);
    };
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50 dark:from-gray-900 dark:via-gray-950 dark:to-gray-900 py-12 flex flex-col items-center">
      <div className="w-full max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
          className="flex flex-col items-center"
        >
          <Logo className="h-16 w-16 mb-4" />
          <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 dark:text-white mb-6 text-center drop-shadow-lg flex items-center gap-3">
            <ShieldCheckIcon className="h-8 w-8 text-blue-500" />
            Smart Contract Audit
          </h1>
          <form onSubmit={handleSubmit} className="w-full max-w-2xl space-y-6 mb-8">
            <div>
              <label htmlFor="code" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Paste your Solidity code or upload .sol file
              </label>
              <div
                className="flex flex-col items-center justify-center border-2 border-dashed border-primary/40 rounded-2xl bg-white/60 dark:bg-gray-800/60 py-8 mb-4 cursor-pointer hover:bg-primary/10 transition-all duration-200 backdrop-blur-lg"
                onDrop={handleFileDrop}
                onDragOver={e => e.preventDefault()}
                onClick={() => fileInputRef.current?.click()}
              >
                <span className="text-muted mb-2 flex items-center gap-2"><DocumentTextIcon className="h-6 w-6 text-indigo-400" /> Drag & drop .sol file here or click to select</span>
                <input
                  type="file"
                  accept=".sol"
                  ref={fileInputRef}
                  onChange={handleFileSelect}
                  className="hidden"
                />
              </div>
              <textarea
                id="code"
                rows={10}
                className="input-field mt-1"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                placeholder="// Paste your Solidity code here..."
              />
            </div>
            <div className="flex items-center justify-between">
              <button
                type="submit"
                disabled={isAnalyzing || !code}
                className="btn-primary disabled:opacity-50"
              >
                {isAnalyzing ? 'Analyzing...' : 'Start Audit'}
              </button>
            </div>
          </form>
          {results && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="mt-8 space-y-6 w-full max-w-2xl"
            >
              <button
                className="btn-secondary mb-4"
                onClick={handleDownloadPDF}
              >
                Download PDF
              </button>
              <div className="backdrop-blur-lg bg-white/60 dark:bg-gray-800/60 border border-white/30 dark:border-gray-700/40 rounded-2xl shadow-xl p-6">
                <h2 className="text-xl font-semibold mb-4 flex items-center gap-2"><SparklesIcon className="h-6 w-6 text-blue-500" />Contract Metadata</h2>
                <dl className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  {Object.entries(results.metadata).map(([key, value]) => (
                    <div key={key}>
                      <dt className="text-sm font-medium text-gray-500 dark:text-gray-400">
                        {key}
                      </dt>
                      <dd className="mt-1 text-sm text-gray-900 dark:text-white">
                        {value as string}
                      </dd>
                    </div>
                  ))}
                </dl>
              </div>
              <div className="backdrop-blur-lg bg-white/60 dark:bg-gray-800/60 border border-white/30 dark:border-gray-700/40 rounded-2xl shadow-xl p-6">
                <h2 className="text-xl font-semibold mb-4 flex items-center gap-2"><DocumentTextIcon className="h-6 w-6 text-indigo-500" />Vulnerabilities</h2>
                <div className="space-y-4">
                  {results.vulnerabilities.map((vuln: any, index: number) => (
                    <div
                      key={index}
                      className="border-l-4 border-red-500 bg-red-50/60 dark:bg-red-900/20 p-4 rounded-xl"
                    >
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                            {vuln.severity}
                          </span>
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-medium text-red-800 dark:text-red-200">
                            {vuln.title}
                          </h3>
                          <div className="mt-2 text-sm text-red-700 dark:text-red-300">
                            <p>{vuln.description}</p>
                          </div>
                          <div className="mt-2 text-sm text-red-700 dark:text-red-300">
                            <p className="font-medium">Recommendation:</p>
                            <p>{vuln.recommendation}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </motion.div>
          )}
        </motion.div>
      </div>
    </div>
  );
};

export default AuditPage; 